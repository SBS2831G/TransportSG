-var svcs = Object.keys(allServices)
-var flattened = svcs.reduce((a, b) => a.concat(b), []);
-var deduped = flattened.filter((element, index, array) => array.indexOf(element) === index);

div#services
    select#service-selector
        for service in deduped
            option=service
            
    div#direction-selector
        div#dir-1
            span Direction 1
        div#dir-2
            span Direction 2

-function isBusStopInRoute(svc, busStopCode) {
-    return svc.stops.map(stop => stop.busStopCode == busStopCode).filter(Boolean).length !== 0;
-}
-function getStopNumber(svc, busStopCode) {
-    return svc.stops.map(stop=>stop.busStopCode).indexOf(busStopCode) + 1;
-}

- let destinations = busStops;
- let services = Object.keys(allServices).reduce((a, s) => { a[s] = allServices[s][0]; return a; }, {});

div#timings
    for serviceNumber in deduped
        div(service=serviceNumber).serviceContainer
            for serviceDirection in allServices[serviceNumber].sort((a, b) => a.routeDirection - b.routeDirection)
                -
                    let {routeDirection} = serviceDirection
                    let directionBusStops = []; 
                    Object.keys(buses).forEach(busStopCode => {
                        if (isBusStopInRoute(serviceDirection, busStopCode)) {
                            if (buses[busStopCode].filter(svc => svc.service === serviceNumber).length)
                                directionBusStops.push({
                                    busStopCode, busTimings: buses[busStopCode], stopNumber: getStopNumber(serviceDirection, busStopCode)
                               });
                       }
                    });
                    directionBusStops = directionBusStops.sort((a,b)=>a.stopNumber - b.stopNumber);
                    if ((directionBusStops.length === 1 && directionBusStops[0].stopNumber === serviceDirection.stops.length) || !directionBusStops.length)
                        continue;
                
                div(direction=routeDirection).serviceDirectionContainer
                    for busStop in directionBusStops
                        -
                            let {busStopCode, busTimings} = busStop;
                            let busStopData = busStops[busStopCode];
                            
                        div.busStopContainer
                            label(for=`checkbox-${serviceNumber}-${routeDirection}-${busStopCode}`).busStopHideContainer
                                span.busStopName=busStopData.busStopName
                            input(type='checkbox' id=`checkbox-${serviceNumber}-${routeDirection}-${busStopCode}` bus-stop-code=busStopCode).busStopHideCheckbox
                            div.busStopContents
                                - let doNotPredict = true;
                                include bus-timings
